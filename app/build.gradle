apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def cfg = rootProject.ext.configuration
def libs = rootProject.ext.libs

android {
    compileSdkVersion cfg.compileVersion
    buildToolsVersion cfg.buildToolsVersion

    defaultConfig {

        applicationId cfg.package
        minSdkVersion cfg.minSdk
        targetSdkVersion cfg.targetSdk
        versionCode cfg.version_code
        versionName cfg.version_name

        resConfig "en"
        buildConfigField "String", "MEETUP_OAUTH_KEY", "\"${meetup_oauth_key}\""
        buildConfigField "String", "MEETUP_OAUTH_SECRET", "\"${meetup_oauth_secret}\""
        buildConfigField "String", "MEETUP_OAUTH_REDIRECT_URI", "\"${meetup_oauth_redirect_uri}\""

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
//        generatedDensities = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    }

    if (cfg.hasKeyfile) {
        signingConfigs {
            release {
                keyAlias project.signing.keyAlias
                keyPassword project.signing.keyPassword
                storeFile file(project.signing.storeFilePath)
                storePassword project.signing.storePassword
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug (Build: ${cfg.gitSha})"
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            if (cfg.hasKeyfile)
                signingConfig signingConfigs.release
            else
                signingConfig android.signingConfigs.debug
        }
    }

    packagingOptions {
        exclude '.readme'
        exclude 'META-INF/LICENSE.txt'
        exclude 'LICENSE.txt'
        exclude 'LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'NOTICE.txt'
        exclude 'NOTICE'
        exclude 'META-INF/services/javax.annotation.processing.Processor'

        exclude 'kotlin/**'
        exclude 'META-INF/*.kotlin_module'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    dexOptions {
        dexInProcess true
        maxProcessCount 4
        javaMaxHeapSize "3g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

//    dataBinding {
//        enabled = true
//    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "com.android.support:support-annotations:${libs.support}"
    compile "com.android.support:appcompat-v7:${libs.support}"
    compile "com.android.support:design:${libs.support}"

    compile "com.google.firebase:firebase-core:${libs.firebase}"
    compile "com.google.firebase:firebase-crash:${libs.firebase}"
    compile "com.firebase:firebase-jobdispatcher:${libs.firebase_jobdispatcher}"

    // kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib:${libs.kotlin}"

    // anko
    compile "org.jetbrains.anko:anko-sdk15:${libs.anko}" // sdk19, sdk21, sdk23 are also available
    compile "org.jetbrains.anko:anko-support-v4:${libs.anko}" // In case you need support.v4 bindings
    compile "org.jetbrains.anko:anko-appcompat-v7:${libs.anko}" // For appcompat-v7 bindings
    compile "org.jetbrains.anko:anko-sqlite:${libs.anko}" // For appcompat-v7 bindings

    // timber
    compile "com.jakewharton.timber:timber:${libs.timber}"

    // threetenabp
    compile "com.jakewharton.threetenabp:threetenabp:${libs.threetenabp}"

    // stetho
    debugCompile "com.facebook.stetho:stetho:${libs.stetho}"
    debugCompile "com.facebook.stetho:stetho-okhttp3:${libs.stetho}"

    // rx
    compile "io.reactivex.rxjava2:rxjava:${libs.rxjava}"
    compile "io.reactivex.rxjava2:rxandroid:${libs.rxandroid}"
    compile "com.jakewharton.rxbinding2:rxbinding:${libs.rxbinding}"

    // gson
    compile "com.google.code.gson:gson:${libs.gson}"
    compile "com.github.salomonbrys.kotson:kotson:${libs.kotson}"

    // retrofit
    compile "com.squareup.retrofit2:retrofit:${libs.retrofit}"
    compile "com.squareup.retrofit2:converter-gson:${libs.retrofit}"
    compile "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:${libs.retrofit_rxjava2_adapter}"
    debugCompile "com.squareup.okhttp3:logging-interceptor:${libs.okhttp_logging}"

    // leakcanary
    debugCompile "com.squareup.leakcanary:leakcanary-android:${libs.leakcanary}"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:${libs.leakcanary}"
    androidTestCompile "com.squareup.leakcanary:leakcanary-android-no-op:${libs.leakcanary}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${libs.leakcanary}"

    // dagger2
    compile "com.google.dagger:dagger:${libs.dagger2}"
    kapt "com.google.dagger:dagger-compiler:${libs.dagger2}"

    // f√ºr's Testen

    testCompile "junit:junit:${libs.junit}"

    androidTestCompile "com.android.support:support-annotations:${libs.support}"
    androidTestCompile "com.android.support.test:runner:${libs.support_test}"
    androidTestCompile "com.android.support.test:rules:${libs.support_test}"
    androidTestCompile("com.android.support.test.espresso:espresso-core:${libs.espresso}", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
//    androidTestCompile "com.android.support.test.uiautomator:uiautomator-v18:${libs.espresso}"
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
}


task release
task testAndRelease

task archiveRelease(type: Copy) {
    from './build/outputs/apk', './build/outputs/'
    into "../releases/${rootProject.ext.configuration.version_code}"
    include('app--release.apk', 'mapping/release/mapping.txt')
    rename('app--release.apk', "${rootProject.ext.configuration.package}_${rootProject.ext.configuration.version_name}_${rootProject.ext.configuration.version_code}.apk")
}

project.afterEvaluate {

    dependencyUpdates.dependsOn clean
    assembleRelease.dependsOn clean

    def publishApkRelease = project.tasks.getByName("publishApkRelease")
    publishApkRelease.dependsOn assembleRelease

    archiveRelease.dependsOn assembleRelease

    release.dependsOn publishApkRelease, archiveRelease
    testAndRelease.dependsOn lint, test, connectedAndroidTest, release
}

// ADD THIS AT THE BOTTOM
// https://developers.google.com/android/guides/google-services-plugin
//apply plugin: 'com.google.gms.google-services'
